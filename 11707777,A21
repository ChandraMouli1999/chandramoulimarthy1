Skip to content
Search or jump to…

Pull requests
Issues
Marketplace
Explore
 
@ChandraMouli1999 
Learn Git and GitHub without any code!
Using the Hello World guide, you’ll start a branch, write comments, and open a pull request.


ChandraMouli1999
/
chandramoulimarthy
1
00
 Code Issues 0 Pull requests 0 Actions Projects 0 Wiki Security Insights Settings
chandramoulimarthy/ You are asked to design and implement a new synchronization primitive that will allow multiple processes to block on an event until some other process signals the event. When a process signals the event, all processes that are blocked on the event are unblocked. If no processes are blocked on an event when it is signaled, then the signal has no effect. Implement the following using C functions.  intdoeventopen(); Creates a new event, returning event ID on success, -1 on failure. intdoeventclose(inteventID); Destroy the event with the given event ID and signal any processes waiting on the event to leave the event. Return number of processes signaled on success and -1 on failure.  intdoeventwait(inteventID); Blocks process until the event is signaled. Return 1 on success and -1 on failure  . intdoeventsig(inteventID); Unblocks all waiting processes; ignored if no processes are blocked. Return number of processes signaled on success and -1 on failure.
@ChandraMouli1999 ChandraMouli1999 Create  You are asked to design and implement a new synchronization …
8de942e 7 minutes ago
46 lines (46 sloc)  933 Bytes
  
#include <stdio.h>
? #include <pthread.h>
? #include <semaphore.h>
?
? int a, b;
? sem_t sem;
?
? void ScanNumbers(void *ptr){
? for (;;){
? printf("%s", (char *)ptr);
? scanf("%d %d", &a, &b);
? sem_post(&sem);
? usleep(100 * 1000);
? }
? }
?
? void SumAndPrint(void *ptr){
? for (;;){
? intdo eventwait(&sem);
? printf("%s %d\n", (char *)ptr, a + b);
? }
? }
?
? int main()
? {
? pthread_t thread1;
? pthread_t thread2;
?
? char *Msg1 = "Enter Number Two No\n";
? char *Msg2 = "sum = ";
?
?
? intdoeventopen(&sem, 0, 0); // Can also use `sem = sem_open( "SemaphoreName",
O_CREAT, 0777, 0);`
?
? pthread_create(&thread1, NULL, (void *)ScanNumbers, (void *)Msg1);
? pthread_create(&thread2, NULL, (void *)SumAndPrint, (void *)Msg2);
?
? pthread_join(thread1, NULL);
? pthread_join(thread2, NULL);
?
? printf("Wait For Both Thread Finished\n");
? intdoeventclose(&sem); // Can also use `sem_unlink( "SemaphoreName");`
?
? return 0;
}
© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
Found 2 out of 2 items
